// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package service

import (
	"fmt"
	"strings"
)

const (
	// ProviderKindGcp is a ProviderKind of type gcp.
	ProviderKindGcp ProviderKind = "gcp"
)

var ErrInvalidProviderKind = fmt.Errorf("not a valid ProviderKind, try [%s]", strings.Join(_ProviderKindNames, ", "))

var _ProviderKindNames = []string{
	string(ProviderKindGcp),
}

// ProviderKindNames returns a list of possible string values of ProviderKind.
func ProviderKindNames() []string {
	tmp := make([]string, len(_ProviderKindNames))
	copy(tmp, _ProviderKindNames)
	return tmp
}

// String implements the Stringer interface.
func (x ProviderKind) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ProviderKind) IsValid() bool {
	_, err := ParseProviderKind(string(x))
	return err == nil
}

var _ProviderKindValue = map[string]ProviderKind{
	"gcp": ProviderKindGcp,
}

// ParseProviderKind attempts to convert a string to a ProviderKind.
func ParseProviderKind(name string) (ProviderKind, error) {
	if x, ok := _ProviderKindValue[name]; ok {
		return x, nil
	}
	return ProviderKind(""), fmt.Errorf("%s is %w", name, ErrInvalidProviderKind)
}

// MarshalText implements the text marshaller method.
func (x ProviderKind) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ProviderKind) UnmarshalText(text []byte) error {
	tmp, err := ParseProviderKind(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
