// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: image_pull_creds/v1/service.proto

package image_pull_credsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/nicjohnson145/image-pull-creds/gen/go/image_pull_creds/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ImagePullCredsServiceName is the fully-qualified name of the ImagePullCredsService service.
	ImagePullCredsServiceName = "image_pull_creds.v1.ImagePullCredsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ImagePullCredsServiceSetupImagePullCredsProcedure is the fully-qualified name of the
	// ImagePullCredsService's SetupImagePullCreds RPC.
	ImagePullCredsServiceSetupImagePullCredsProcedure = "/image_pull_creds.v1.ImagePullCredsService/SetupImagePullCreds"
)

// ImagePullCredsServiceClient is a client for the image_pull_creds.v1.ImagePullCredsService
// service.
type ImagePullCredsServiceClient interface {
	SetupImagePullCreds(context.Context, *connect.Request[v1.SetupImagePullCredsReqeust]) (*connect.Response[v1.SetupImagePUllCredsResponse], error)
}

// NewImagePullCredsServiceClient constructs a client for the
// image_pull_creds.v1.ImagePullCredsService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewImagePullCredsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ImagePullCredsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	imagePullCredsServiceMethods := v1.File_image_pull_creds_v1_service_proto.Services().ByName("ImagePullCredsService").Methods()
	return &imagePullCredsServiceClient{
		setupImagePullCreds: connect.NewClient[v1.SetupImagePullCredsReqeust, v1.SetupImagePUllCredsResponse](
			httpClient,
			baseURL+ImagePullCredsServiceSetupImagePullCredsProcedure,
			connect.WithSchema(imagePullCredsServiceMethods.ByName("SetupImagePullCreds")),
			connect.WithClientOptions(opts...),
		),
	}
}

// imagePullCredsServiceClient implements ImagePullCredsServiceClient.
type imagePullCredsServiceClient struct {
	setupImagePullCreds *connect.Client[v1.SetupImagePullCredsReqeust, v1.SetupImagePUllCredsResponse]
}

// SetupImagePullCreds calls image_pull_creds.v1.ImagePullCredsService.SetupImagePullCreds.
func (c *imagePullCredsServiceClient) SetupImagePullCreds(ctx context.Context, req *connect.Request[v1.SetupImagePullCredsReqeust]) (*connect.Response[v1.SetupImagePUllCredsResponse], error) {
	return c.setupImagePullCreds.CallUnary(ctx, req)
}

// ImagePullCredsServiceHandler is an implementation of the
// image_pull_creds.v1.ImagePullCredsService service.
type ImagePullCredsServiceHandler interface {
	SetupImagePullCreds(context.Context, *connect.Request[v1.SetupImagePullCredsReqeust]) (*connect.Response[v1.SetupImagePUllCredsResponse], error)
}

// NewImagePullCredsServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewImagePullCredsServiceHandler(svc ImagePullCredsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	imagePullCredsServiceMethods := v1.File_image_pull_creds_v1_service_proto.Services().ByName("ImagePullCredsService").Methods()
	imagePullCredsServiceSetupImagePullCredsHandler := connect.NewUnaryHandler(
		ImagePullCredsServiceSetupImagePullCredsProcedure,
		svc.SetupImagePullCreds,
		connect.WithSchema(imagePullCredsServiceMethods.ByName("SetupImagePullCreds")),
		connect.WithHandlerOptions(opts...),
	)
	return "/image_pull_creds.v1.ImagePullCredsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ImagePullCredsServiceSetupImagePullCredsProcedure:
			imagePullCredsServiceSetupImagePullCredsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedImagePullCredsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedImagePullCredsServiceHandler struct{}

func (UnimplementedImagePullCredsServiceHandler) SetupImagePullCreds(context.Context, *connect.Request[v1.SetupImagePullCredsReqeust]) (*connect.Response[v1.SetupImagePUllCredsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("image_pull_creds.v1.ImagePullCredsService.SetupImagePullCreds is not implemented"))
}
